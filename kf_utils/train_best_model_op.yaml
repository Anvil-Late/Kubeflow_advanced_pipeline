name: Train best model
metadata:
  annotations: {author: Antoine Villatte}
inputs:
- {name: best_model, type: String}
- {name: best_hyperparams, type: JsonObject}
- {name: input_X_train_csv, type: CSV}
- {name: input_y_train_csv, type: CSV}
outputs:
- {name: output_pickle_model, type: Pickle}
implementation:
  container:
    image: public.ecr.aws/f6t4n1w1/poc_kf_pipeline:latest
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef train_best_model(best_model, \n                     best_hyperparams,\
      \ \n                     input_X_train_csv, \n                     input_y_train_csv,\n\
      \                     output_pickle_model):\n\n    import pandas as pd\n   \
      \ import xgboost as xgb\n    from sklearn.metrics import mean_squared_error,\
      \ explained_variance_score, r2_score\n    from sklearn.model_selection import\
      \ cross_val_score, KFold\n    from sklearn.svm import SVR\n    from sklearn.ensemble\
      \ import RandomForestRegressor\n    import os\n    import pickle\n\n    if best_model\
      \ == 'XGB':\n        modfit = xgb.XGBRegressor(objective = \"reg:squarederror\"\
      ,\n                                   tree_method = 'hist',\n              \
      \                     eval_metric = [\"rmse\"],\n                          \
      \         **best_hyperparams)\n    elif best_model == 'SVM':\n        modfit\
      \ = SVR(**best_hyperparams)\n\n    elif best_model == \"RandomForest\":\n  \
      \      modfit = RandomForestRegressor(**best_hyperparams)\n\n    else:\n   \
      \     raise ValueError(\"Model name not recognized : \".format(best_model))\n\
      \n    X_train = pd.read_csv(input_X_train_csv)\n    y_train = pd.read_csv(input_y_train_csv)\n\
      \    modfit.fit(X_train, y_train)\n\n    with open(output_pickle_model, 'wb')\
      \ as f:\n        pickle.dump(modfit, f)\n\nimport json\nimport argparse\n_parser\
      \ = argparse.ArgumentParser(prog='Train best model', description='')\n_parser.add_argument(\"\
      --best-model\", dest=\"best_model\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--best-hyperparams\", dest=\"best_hyperparams\", type=json.loads,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--input-X-train-csv\"\
      , dest=\"input_X_train_csv\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--input-y-train-csv\", dest=\"input_y_train_csv\", type=str,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--output-pickle-model\"\
      , dest=\"output_pickle_model\", type=_make_parent_dirs_and_return_path, required=True,\
      \ default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\n\
      _outputs = train_best_model(**_parsed_args)\n"
    args:
    - --best-model
    - {inputValue: best_model}
    - --best-hyperparams
    - {inputValue: best_hyperparams}
    - --input-X-train-csv
    - {inputPath: input_X_train_csv}
    - --input-y-train-csv
    - {inputPath: input_y_train_csv}
    - --output-pickle-model
    - {outputPath: output_pickle_model}
